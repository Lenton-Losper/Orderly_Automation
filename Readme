# WhatsApp Bot Modular Structure

## Folder Structure
```
project-root/
├── src/
│   ├── index.js                    # Main entry point
│   ├── config/
│   │   ├── database.js             # Firebase initialization
│   │   └── constants.js            # App constants and config
│   ├── services/
│   │   ├── firebase.js             # All Firebase operations
│   │   ├── whatsapp.js             # WhatsApp connection & socket management
│   │   └── business.js             # Business context management
│   ├── models/
│   │   ├── OrderSession.js         # Order session class
│   │   └── Customer.js             # Customer model (if needed)
│   ├── handlers/
│   │   └── messageHandler.js       # Message processing logic
│   ├── utils/
│   │   ├── messageGenerators.js    # All message generation functions
│   │   ├── validators.js           # Input validation functions
│   │   └── cleanup.js              # Session cleanup utilities
│   └── middleware/
│       └── rateLimiter.js          # Rate limiting (optional)
├── auth/                           # WhatsApp auth files (auto-generated)
├── .env                           # Environment variables
├── .gitignore
├── package.json
└── README.md
```

## File Breakdown

### `src/index.js` (Main Entry Point)
- Initialize the application
- Start WhatsApp connection
- Handle process signals and cleanup
- Coordinate between services

### `src/config/database.js`
- Firebase Admin SDK initialization
- Database connection setup
- Export database instance

### `src/config/constants.js`
- Owner number configuration
- Business settings
- Timeout values
- Other app constants

### `src/services/firebase.js`
- All Firebase Firestore operations
- Customer CRUD operations
- Order management
- Business mapping operations
- Data validation before saving

### `src/services/whatsapp.js`
- WhatsApp socket creation and configuration
- Connection management and reconnection logic
- Presence updates
- Message sending utilities

### `src/services/business.js`
- Business context management
- Product loading and caching
- Business mapping operations
- Multi-tenant logic

### `src/models/OrderSession.js`
- OrderSession class definition
- Cart management methods
- Pricing calculations
- Session validation

### `src/handlers/messageHandler.js`
- Main message processing logic
- Command routing
- Session management
- Response coordination

### `src/utils/messageGenerators.js`
- All message generation functions
- Menu generators
- Cart summaries
- Help messages
- Order confirmations

### `src/utils/validators.js`
- Input validation functions
- Customer info validation
- Registration data validation
- Message format validation

### `src/utils/cleanup.js`
- Session cleanup utilities
- Memory management
- Graceful shutdown procedures

## Key Benefits of This Structure

1. **Separation of Concerns**: Each file has a single responsibility
2. **Testability**: Easier to unit test individual components
3. **Maintainability**: Changes to one feature don't affect others
4. **Scalability**: Easy to add new features or modify existing ones
5. **Readability**: Clear organization makes code easier to understand
6. **Reusability**: Services can be reused across different parts of the app

## Import/Export Pattern

Each module will use ES6 imports/exports or CommonJS require/module.exports consistently:

```javascript
// Example: src/services/firebase.js
class FirebaseService {
  // All Firebase operations
}

module.exports = new FirebaseService();

// Example: src/index.js
const firebaseService = require('./services/firebase');
const whatsappService = require('./services/whatsapp');
const messageHandler = require('./handlers/messageHandler');
```

## Configuration Management

Environment variables in `.env`:
```
OWNER_NUMBER=264812345678@s.whatsapp.net
FIREBASE_PROJECT_ID=your-project-id
MAX_RETRIES=5
SESSION_TIMEOUT=1800000
```

This structure will make your codebase much more professional and easier to work with!